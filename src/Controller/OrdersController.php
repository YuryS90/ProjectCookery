<?php

namespace Controller;

use Core\Config;
use Model\DishesModel;
use Model\OrdersModel;
use Model\UsersModel;
use TexLab\MyDB\DB;
use View\View;

class OrdersController extends AbstractTableController
{

    protected $tableName = "orders";
    protected $usersTable;
    protected $dishesTable;


    /*
     * в конструкторе предок получет соединение с БД
     * делаем ещё одну подключение. мы хотим получить список пользователей из таблицы users
     * для того чтобы сделать выпадающий список нужен список пользователей. Этот список может
     * вернуть метод getUsers(), который находиться в UsersModel
     * */

    public function __construct(View $view)
    {
        parent::__construct($view);
        $this->table = new OrdersModel(
            $this->tableName,
            DB::Link([
                'host' => Config::MYSQL_HOST,
                'username' => Config::MYSQL_USER_NAME,
                'password' => Config::MYSQL_PASSWORD,
                'dbname' => Config::MYSQL_DATABASE
            ])

        );
        /*
         * создаём экземпляр UsersModel, где должны передать подключение к БД
        * ДЛя UsersModel в __construct передаётся (string $tableName, mysqli $mysqli)
        * */
        $this->usersTable = new UsersModel(
            "users",
            DB::Link([
                'host' => Config::MYSQL_HOST,
                'username' => Config::MYSQL_USER_NAME,
                'password' => Config::MYSQL_PASSWORD,
                'dbname' => Config::MYSQL_DATABASE
            ])
        );

        $this->dishesTable = new DishesModel(
            "dishes",
            DB::Link([
                'host' => Config::MYSQL_HOST,
                'username' => Config::MYSQL_USER_NAME,
                'password' => Config::MYSQL_PASSWORD,
                'dbname' => Config::MYSQL_DATABASE
            ])
        );
        $this
            ->view
            ->setFolder('orders');
    }


    public function actionShow(array $data)
    {
//        print_r($_SESSION['user']['id']);
        $this
            ->view
            ->setTemplate('show')
            ->setData([
                "usersList" => $this->usersTable->getUsers(),
                "dishesList" => $this->dishesTable->getDishes(),
                'table' => $this
                    ->table
                    ->reset()
                    ->setPageSize(Config::PAGE_SIZE)
                    ->getOrdersPage($data['get']['page'] ?? 1),
                'fields' => array_diff($this->table->getColumnsNames(), ['id']),
                'comments' => $this->table->getColumnsComments(),
                'type' => $this->getClassName(),
                'pageCount' => $this->table->pageCount(),
                'currentPage' => $data['get']['page'] ?? 1
            ]);
        $this->table->getAutomaticDelOrders();
        // в show будем ловить usersList + ordersList
        //        print_r($this->usersTable->getUsers());
//                print_r($this->ordersTable->getDishes());
//        print_r($this->dishesTable->getDishes());
    }

    public function actionShowEdit(array $data)
    {
        parent::actionShowEdit($data); // TODO: Change the autogenerated stub

        $this
            ->view
            ->setFolder('orders');

        $this->view->addData(
            [
                "usersList" => $this->usersTable->getUsers(),
                "dishesList" => $this->dishesTable->getDishes()
            ]
        );
    }

    // Отмена заказа
    public function actionCancelEdit(array $data)
    {

        $id = $data['get']['id'];
        $this->table->getEditStatus($id);
        $this->redirect('?action=show&type=' . $this->getClassName());
    }


}
